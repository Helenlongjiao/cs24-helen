1. Explain how you represent the world map in memory.
We first used a 3d bool vector called temp3Darray to store the parse the data file. A solid voxel is stored as true, and an empty voxel is stored as false. So the world map will initially look like a bunch of 0 and 1. Then, we built a map as a member variable called mGraph. The key is a Point and value is a Point set. This map converts all the 0 and 1 in the 3d vector into Points, and stores all the Points they can get to in one step into a Point set. 

2. Describe the algorithm you use to perform route queries.
(1). For parsing the data and initializing the map, we create a 3d vector and converted it to a map. When passing the data to the map, we first created a Point from the data and check if the voxel is walkable. Then, we check if the player can walk in one step to the south, north, west, and east. If yes, we store the position that the player can go in a Point set. At last, we store the Point and Point set into the map.
(2). For finding the route: we started by inserting the source point into the priority queue with its distance to the destination calculated (using the function qifa). Loop until the priority queue is empty: Extract the point with the lowest cost from the queue; for each adjacent walkable point, calculate its distance to the destination and insert it into the queue if it hasn't been visited; mark the current point as visited and record its parent. If the destination point is reached, break out of the loop.
(3). Backtrack: If the destination is reached, reconstruct the path by backtracking from the destination point. This is achieved by the function 'sResult's. This function converts the list of points into a series of moves and store it in a Route, which is the final result.

3. List the data structures you use, and explain how you chose them.
Temp3dArray (3D vector of booleans) (std::vector<std::vector<std::vector<bool>>>): It's smart and very easy to use. It has really useful methods like find and size. Efficient access and update operations. 3d vector can represent the map in a simple and direct way, and it'ss really easy to access.

fallCache (3D vector of int) (std::vector<std::vector<std::vector<int>>>): it helps in determining if a point can fall to a specific level, optimizing fall-related path checks.

Graph (mGraph) (std::map<Point, std::set<Point>>): Provides a convenient way to store and lookup walkable neighbors. The runtime is O(logn) so it'ss quite fast, and it'ss clear and convenient to cooperate with priority queue to find a short path to the destination.

Priority Queue (std::priority_queue<Point, std::vector<Point>, Compare>): Used to implement the A* algorithm, keeping track of the next point to process based on the estimated cost to the destination.

Visited Set (std::set<Point>): Keeps track of visited points to avoid processing the same point multiple times.  It also helps in determining if a point can fall to a specific level, optimizing fall-related path checks.

4. Give the big-O runtime of each step, and the runtime in total.
At the constructor part, the runtime depends on the size of the input file. Since we are looping from beginning to end for both three directions, the runtime is O(mWidth, mDepth, mHeight)

At the route function, where we already constructed a Graph stored as a map (with the current point as the key and the set of connected points (0 - 4) as a value), the worst-case runtime depends on number of nodes (V) and numbers of edge (E). Inside each while loop, the vSet and minHeap take O(log V). Since we don'st ignore nodes that we already processed, traversing the whole map will take (V+E) loops, giving a total runtime of O((V+E)logV)
